Задача:

Написать программу, которая будет принимать в качестве аргумента имя текстового файла,
и выводить CSV файл с колонками:
1. Слово.
2. Частота.
3. Частота (в %).
CSV файл должен быть упорядочен по убыванию частоты, то есть самые частые слова
должны идти в начале. Разделителями считать все символы кроме букв и цифр.



Подзадачи:
1 Проверка аргументов командной строки
  Программа принимает один аргумент командной строки, представляющий путь к входному текстовому файлу input.txt.
  Если количество аргументов неверное (!= 1), программа выводит сообщение об ошибке и завершает выполнение.

2 Чтение входного файла и подсчёт слов
  Программа открывает входной файл, считывает его содержимое по символам.
  Символы составляют слова, которые формируются в объекте StringBuilder - sb.
  Слова преобразуются в нижний регистр и добавляются в карту HashMap для подсчёта их частоты.

  Техническая составляющая:
    2.1 Создали объект типа Reader
    2.2 Символы читаем с помощью метода класс Reader - read:
      Reads a single character. This method will block until a character is available, an I/O error occurs, or the end of the stream is reached.
      https://docs.oracle.com/javase/8/docs/api/java/io/Reader.html#read--
    2.3 Проверка на то что символ является числом буквой или цифрой: Character.isLetterOrDigit
      Determines if the specified character is a letter or digit.
      https://docs.oracle.com/javase/8/docs/api/java/lang/Character.html#isLetterOrDigit-char-
    2.4 Добавление нового элемента в объект sb: sb.append(Character.toLowerCase(c));
      Appends the string representation of the char argument to this sequence.
      https://docs.oracle.com/javase/8/docs/api/java/lang/StringBuilder.html#append-char-

3 Сортировка слов по частоте
  Частоты слов из HashMap переносятся в список ArrayList (sorted_words).
  Список сортируется по убыванию частоты с использованием компаратора (лямбда-выражения).

  Техническая составляющая:
    List<Map.Entry<String, Integer>> sorted_words = new ArrayList<>(word_frequency.entrySet());
    sorted_words.sort((e1, e2) -> Integer.compare(e2.getValue(), e1.getValue()));

    3.1 Объект sorted_words — это переменная типа List<Map.Entry<String, Integer>>, но для создания объекта
        используем конкретную реализацию ArrayList. Полиморфизм: переменная sorted_words объявлена как
        переменная типа List но ссылается на объект класса который реализует интерфейс List (ArrayList).
    3.2 Логика нашего лямбда-выражения:
        3.2.1 e1 и e2 — это два элемента типа Map.Entry<String, Integer>.
              Каждый элемент содержит пару K-V. Например слово "привет" встретилось 2 раза. "привет"-ключ, 2-значение.
        3.2.2 getValue() извлекает значение из Map.Entry (2 от "привет")
        3.2.3 e2.getValue().compareTo(e1.getValue()) — вызов метода compareTo() класса Integer,
                который сравнивает два целых числа: e2.getValue() и e1.getValue().
                Это значит, что элементы с большим значением будут идти перед элементами с меньшими значениями.

                Покажи откуда взял (https://www.javatpoint.com/java-list-sort-lambda)

4 Генерация выходного CSV файла

5 Вывод сообщения о создании файла